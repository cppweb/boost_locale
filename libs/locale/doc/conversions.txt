// vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4 filetype=cpp.doxygen
/*!
\page conversions Conversions

There is a set of functions that perform basic string conversion operations: upper, lower and title case conversions, case folding
and Unicode normalization. These are \ref boost::locale::to_upper "to_upper" , \ref boost::locale::to_lower "to_lower", \ref boost::locale::to_title "to_title", \ref boost::locale::fold_case "fold_case" and \ref boost::locale::normalize "normalize".

You may notice that there are existing functions \c to_upper and \c to_lower in the Boost.StringAlgo library.
The difference is that these function operate over an entire string instead of performing incorrect character-by-character conversions.

For example:

\code
    std::wstring gruben = L"grüßen";
    std::wcout << boost::algorithm::to_upper_copy(gruben) << " " << boost::locale::to_upper(gruben) << std::endl;
\endcode

Would give in output:

\verbatim
GRÜßEN GRÜSSEN
\endverbatim

Where a letter "ß" was not converted correctly to double-S in first case because of a limitation of \c std::ctype facet.

\note

-   \ref boost::locale::normalize() "normalize" operates only on Unicode-encoded strings, i.e.: UTF-8, UTF-16 and UTF-32 depending on the
    character width. So be careful when using non-UTF encodings as they may be treated incorrectly.
-   \ref boost::locale::fold_case() "fold_case" is generally a locale-independent operation, but it receives a locale as a parameter to
    determine the 8-bit encoding.
-   All of these functions can work with an STL string, a NUL terminated string, or a range defined by two pointers. They always
    return a newly created STL string.
-   The length of the string may change, see the above example.
*/


