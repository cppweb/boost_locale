# copyright John Maddock 2003, Artyom Beilis 2010
# Distributed under the Boost Software License, Version 1.0. 
# (See accompanying file LICENSE_1_0.txt or copy at 
# http://www.boost.org/LICENSE_1_0.txt.

project /boost/locale
    : source-location ../src
    ;

import configure ;
import project ;

exe has_iconv : ../build/has_iconv.cpp ;
explicit has_iconv ;

ICONV_PATH = [ modules.peek : ICONV_PATH ] ;
lib iconv 
  : 
  : <search>$(ICONV_PATH)/lib <link>shared <runtime-link>shared
  :
  : <include>$(ICONV_PATH)/include 
  ;
explicit iconv ;

exe has_external_iconv : ../build/has_iconv.cpp iconv ;
explicit has_external_iconv ;


ICU_PATH =  [ modules.peek : ICU_PATH ] ;
ICU_LINK =  [ modules.peek : ICU_LINK ] ;
if $(ICU_LINK)
{
    ICU_OPTS = <include>$(ICU_PATH)/include <linkflags>$(ICU_LINK) <dll-path>$(ICU_PATH)/bin <runtime-link>shared ;
}
else
{
    searched-lib icuuc : : <search>$(ICU_PATH)/lib <link>shared <runtime-link>shared ;
    searched-lib icuuc : : <toolset>msvc <variant>debug <name>icuucd <search>$(ICU_PATH)/lib <link>shared <runtime-link>shared ;
    searched-lib icuuc : : <name>this_is_an_invalid_library_name ;
    searched-lib icudt : : <search>$(ICU_PATH)/lib <name>icudata <link>shared <runtime-link>shared ;
    searched-lib icudt : : <search>$(ICU_PATH)/lib <name>icudt <toolset>msvc <link>shared <runtime-link>shared ;
    searched-lib icudt : : <name>this_is_an_invalid_library_name ;
    searched-lib icuin : : <search>$(ICU_PATH)/lib <name>icui18n <link>shared <runtime-link>shared ;
    searched-lib icuin : : <toolset>msvc <variant>debug <name>icuind <search>$(ICU_PATH)/lib <link>shared <runtime-link>shared ;
    searched-lib icuin : : <toolset>msvc <variant>release <name>icuin <search>$(ICU_PATH)/lib <link>shared <runtime-link>shared ;
    searched-lib icuin : : <name>this_is_an_invalid_library_name ;
    explicit icuuc icudt icuin ;
    
    ICU_OPTS =   <include>$(ICU_PATH)/include 
      <library>icuuc/<link>shared/<runtime-link>shared 
      <library>icudt/<link>shared/<runtime-link>shared 
      <library>icuin/<link>shared/<runtime-link>shared
      <dll-path>$(ICU_PATH)/bin
        <runtime-link>shared ;
}
exe has_icu : ../build/has_icu_test.cpp  : $(ICU_OPTS) ;
explicit has_icu ;


# This function is called whenever the 'boost_locale' metatarget
# below is generated and figures what external components we have,
# what user wants, and what sources have to be compiled in the end.
rule configure ( properties * )
{
    local result ;
    
    local found-iconv ;
    
    if <boost.locale.iconv>on in $(properties)
      || ! <boost.locale.iconv> in $(properties:G) 
        && <target-os>linux in $(properties)
    {
        # See if iconv is bundled with standard library.
        if [ configure.builds has_iconv : $(properties) : "iconv (libc)" ]
        {
            found-iconv = true ;
        }
        else 
        {
            if [ configure.builds has_external_iconv : $(properties) : "iconv (separate)" ]
            {
                found-iconv = true ;
                result += <library>iconv ;
            }
        }
    }        
    if $(found-iconv) 
    {
        result += <define>BOOST_LOCALE_WITH_ICONV=1 ;
    }

    local found-icu ;
    if ! <boost.locale.iconv>off in $(properties)
    {
        if [ configure.builds has_icu : $(properties) : "icu" ]
        {
            found-icu = true ;
            result += <define>BOOST_LOCALE_WITH_ICU=1 ;

            for s in boundary codecvt collator conversion date_time formatter
                     icu_backend numeric
            {
                result += <source>icu/$(s).cpp ;
            }
        }
    }
        
    if ! $(found-iconv) && ! $(found-icu) && ! <target-os>windows in $(properties)
    {
        ECHO "error: Boost.Locale need either iconv or ICU library to be built." ;
        EXIT ;
    }
    
    if ! <boost.locale.std> in $(properties:G)
    {
        if <toolset>sun in $(properties)
        {
            properties += <boost.locale.std>off ;
        }
        else
        {
            properties += <boost.locale.std>on ;
        }                
    }
    
    if <boost.locale.std>off in $(properties)
    {
        result += <define>BOOST_LOCALE_NO_STD_BACKEND=1 ;
    }
    else
    {
        STD_SOURCES =
          codecvt
          collate
          converter
          numeric
          std_backend
          ;
        result += <source>std/$(STD_SOURCES).cpp ;
    }
    
    if ! <boost.locale.winapi> in $(properties:G)
    {
        if <target-os>windows in $(properties) 
          || <target-os>cygwin in $(properties)
        {
            properties += <boost.locale.winapi>on ;
        }      
        else
        {
            properties += <boost.locale.winapi>off ;
        }                
    }
    
    if <boost.locale.winapi>off in $(properties)
    {
        result += <define>BOOST_LOCALE_NO_WINAPI_BACKEND=1 ;
    }
    else
    {
        WINAPI_SOURCES = 
          collate
          converter
          numeric
          win_backend
          ;
        result += <source>win32/$(WINAPI_SOURCES).cpp ;
    }
    
    if ! <boost.locale.posix> in $(properties:G)
    {
        if <target-os>linux in $(properties) || <target-os>darwin in $(properties)
        {
            properties += <boost.locale.posix>on ;
        }
        else
        {
            properties += <boost.locale.posix>on ;            
        }        
    }
    
    if <boost.locale.posix>off in $(properties)
    {
        result += <define>BOOST_LOCATE_NO_POSIX_BACKEND=1 ;        
    }
    else
    {
        POSIX_SOURCES = 
          collate
          converter
          numeric
          codecvt
          posix_backend
          ;
        result += <source>posix/$(POSIX_SOURCES).cpp ;
    }
          
    return $(result) ;
}



lib boost_locate 
    : encoding/codepage.cpp
    shared/date_time.cpp
    shared/format.cpp
    shared/formatting.cpp
    shared/generator.cpp
    shared/ids.cpp
    shared/localization_backend.cpp
    shared/message.cpp
    shared/mo_lambda.cpp
    util/codecvt_converter.cpp
    util/default_locale.cpp
    util/info.cpp
    util/locale_data.cpp 
    : <define>BOOST_THREAD_NO_LIB=1
      <threading>multi
      <conditional>@configure
    ;





